
import re
class Solution(object):
    
    # Operator Precedence
    def __init__(self):
        self.oP = {"*" : 1,"/" : 1, "+" : 0, "-" : 0}
    
    # Calculate expression output
    def calculate(self, s):

        # Tokenize the arithmetic expression using regular expression
        # "33+5/7 " will become ["33","+","5","/","7"]
        tokens = re.findall('\d+|\S', s)
        
        # Convert tokens from infix to postfix
        postfix = []
        ops = [] # Stack
        for t in tokens:
            if t not in self.oP:
                postfix.append(t)
            else:
                while ops and self.oP[ops[-1]] >= self.oP[t]: # While top of stack has gte precedence
                    postfix.append(ops.pop())
                ops.append(t)
        
        # Empty out remaining operators
        while ops:
            postfix.append(ops.pop())
        
        # Evaluate postfix
        for t in postfix:
            if t not in self.oP:
                ops.append(t)
            else:
                o1 = int(ops.pop())
                o0 = int(ops.pop())
                
                if t == "*":
                    r = o0 * o1
                elif t == "/":
                    r = o0 / o1
                elif t == "+":
                    r = o0 + o1
                elif t == "-":
                    r = o0 - o1
                else:
                    raise
                    
                ops.append(r)
            
        return ops[0]
